name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Version: $VERSION"
          
      - name: Build documentation
        run: npm run build
        
      - name: Create documentation archive
        run: |
          cd build
          zip -r ../ava-docs-${{ steps.version.outputs.version }}.zip .
          tar -czf ../ava-docs-${{ steps.version.outputs.version }}.tar.gz .
          cd ..
          echo "üì¶ Archives created"
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## üìã Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "### Initial Release" >> CHANGELOG.md
            git log --pretty=format:"- %s (%an)" HEAD >> CHANGELOG.md
          else
            echo "### Changes since $PREVIOUS_TAG" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Features
            echo "#### ‚ú® Features" >> CHANGELOG.md
            git log ${PREVIOUS_TAG}..HEAD --grep="feat:" --pretty=format:"- %s" >> CHANGELOG.md || echo "- No new features" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Bug fixes
            echo "#### üêõ Bug Fixes" >> CHANGELOG.md
            git log ${PREVIOUS_TAG}..HEAD --grep="fix:" --pretty=format:"- %s" >> CHANGELOG.md || echo "- No bug fixes" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Documentation
            echo "#### üìö Documentation" >> CHANGELOG.md
            git log ${PREVIOUS_TAG}..HEAD --grep="docs:" --pretty=format:"- %s" >> CHANGELOG.md || echo "- No documentation updates" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # All commits
            echo "#### üìù All Changes" >> CHANGELOG.md
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%an)" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Statistics
          echo "### üìä Statistics" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "- **Commits:** $(git rev-list ${PREVIOUS_TAG}..HEAD --count)" >> CHANGELOG.md
            echo "- **Contributors:** $(git log ${PREVIOUS_TAG}..HEAD --format='%an' | sort -u | wc -l)" >> CHANGELOG.md
            echo "- **Files changed:** $(git diff --stat ${PREVIOUS_TAG}..HEAD | tail -1 | awk '{print $1}')" >> CHANGELOG.md
          else
            echo "- **Total Commits:** $(git rev-list HEAD --count)" >> CHANGELOG.md
            echo "- **Contributors:** $(git log --format='%an' | sort -u | wc -l)" >> CHANGELOG.md
            echo "- **Files:** $(find . -type f -name '*.md' -o -name '*.js' -o -name '*.json' | wc -l)" >> CHANGELOG.md
          fi
          
          cat CHANGELOG.md
          
      - name: Calculate checksums
        run: |
          sha256sum ava-docs-*.zip > checksums.sha256
          sha256sum ava-docs-*.tar.gz >> checksums.sha256
          echo "üìù Checksums calculated"
          cat checksums.sha256
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: AVA Documentation ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ inputs.prerelease || false }}
          files: |
            ava-docs-*.zip
            ava-docs-*.tar.gz
            checksums.sha256
            
      - name: Deploy to production
        if: ${{ !inputs.prerelease }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          cname: false
          
      - name: Update package.json version
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Extract version number without 'v' prefix
          VERSION_NUM=$(echo "${{ steps.version.outputs.version }}" | sed 's/^v//')
          
          # Update package.json
          npm version $VERSION_NUM --no-git-tag-version
          
          # Create PR for version update
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          BRANCH_NAME="update-version-${{ steps.version.outputs.version }}"
          git checkout -b $BRANCH_NAME
          git add package.json package-lock.json
          git commit -m "chore: update version to $VERSION_NUM"
          git push origin $BRANCH_NAME
          
      - name: Create version update PR
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const versionNum = version.replace(/^v/, '');
            
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: update version to ${versionNum}`,
              head: `update-version-${version}`,
              base: 'main',
              body: `## Version Update\n\nThis PR updates the package.json version to ${versionNum} following the release of ${version}.\n\n### Changes\n- Updated package.json version\n- Updated package-lock.json\n\n---\n*This PR was automatically created by the release workflow.*`
            });
            
      - name: Post release notification
        run: |
          echo "## üéâ Release Published!"
          echo ""
          echo "### Release Information:"
          echo "- **Version:** ${{ steps.version.outputs.version }}"
          echo "- **Pre-release:** ${{ inputs.prerelease || false }}"
          echo "- **Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          echo "- **Documentation:** https://datarm.github.io/AVA-Docs/"
          echo ""
          echo "### üì¶ Assets:"
          echo "- ava-docs-${{ steps.version.outputs.version }}.zip"
          echo "- ava-docs-${{ steps.version.outputs.version }}.tar.gz"
          echo "- checksums.sha256"